{"version":3,"sources":["component/TodoItems.js","component/AddTodo.js","component/Todos.js","App.js","serviceWorker.js","index.js"],"names":["TodoItems","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this","todos","props","getStyle","item","color","completed","textDecoration","listStyle","todoItems","map","react_default","a","createElement","Fragment","id","style","type","onChange","changeCheck","bind","title","buttonEditStyle","onClick","editItem","buttonStyle","delItem","Component","cursor","margin","AddTodo","call","onInputChangeHandle","e","_e$target","target","name","checked","setState","defineProperty","submitForm","saveChangeItem","state","initialState","itemEdit","inputStyle","placeholder","padding","background","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAEaA,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAGa,IAAAC,EAAAT,KACCU,EAAQV,KAAKW,MAAMD,MAEnBE,EAAW,SAACC,GACd,MAAO,CACHC,MAAOD,EAAKE,UAAY,MAAQ,QAChCC,eAAgBH,EAAKE,UAAY,eAAiB,OAClDE,UAAW,SAKbC,EAAYR,EAAMS,IAAI,SAACN,GACzB,OAAOO,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,CAAgBhB,IAAKM,EAAKW,IAC7BJ,EAAAC,EAAAC,cAAA,MAAIG,MAAOb,EAASC,IAChBO,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,SAAQI,KAAK,WAAWC,SAAWlB,EAAKE,MAAMiB,YAAYC,KAAKpB,EAAKI,EAAKW,MACxEX,EAAKiB,MACNV,EAAAC,EAAAC,cAAA,UAAQG,MAAOM,EAAiBC,QAAUvB,EAAKE,MAAMsB,SAASJ,KAAKpB,EAAKI,EAAKW,KAA7E,QACAJ,EAAAC,EAAAC,cAAA,UAAQG,MAAOS,EAAaF,QAAUvB,EAAKE,MAAMwB,QAAQN,KAAKpB,EAAKI,EAAKW,KAAxE,UAOhB,OACIJ,EAAAC,EAAAC,cAAA,UACKJ,OA/BjBtB,EAAA,CAA+BwC,aAqCzBL,EAAkB,CACpBjB,MAAQ,OACRuB,OAAO,UACPC,OAAQ,GAGNJ,EAAc,CAChBpB,MAAQ,MACRuB,OAAO,WAIIzC,WCjDF2C,EAAb,SAAA1C,GAGI,SAAA0C,EAAY5B,GAAO,IAAAF,EAAA,OAAAX,OAAAC,EAAA,EAAAD,CAAAE,KAAAuC,IACf9B,EAAAX,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyC,GAAAC,KAAAxC,KAAMW,KAaV8B,oBAAsB,SAACC,GAAM,IAAAC,EAEHD,EAAEE,OAAlBC,EAFmBF,EAEnBE,KAAMrC,EAFamC,EAEbnC,MACA,aAARqC,IACArC,EAAQkC,EAAEE,OAAOE,SAKrBrC,EAAKsC,SAALjD,OAAAkD,EAAA,EAAAlD,CAAA,GACK+C,EAAOrC,KAxBGC,EA4BnBwC,WAAa,WACTxC,EAAKE,MAAMuC,eAAezC,EAAK0C,OAE/B1C,EAAKsC,SAAStC,EAAK2C,eA7BnB3C,EAAK2C,aAAe,CAChBtB,MAAO,GACPN,GAAI,GACJT,WAAW,GAEXJ,EAAM0C,SACN5C,EAAK0C,MAAQxC,EAAM0C,SAEnB5C,EAAK0C,MAAQ1C,EAAK2C,aAVP3C,EAHvB,OAAAX,OAAAO,EAAA,EAAAP,CAAAyC,EAAA1C,GAAAC,OAAAQ,EAAA,EAAAR,CAAAyC,EAAA,EAAAhC,IAAA,SAAAC,MAAA,WAgDQ,OAPOY,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOmB,KAAK,QAAQrC,MAAOR,KAAKmD,MAAMrB,MAAOL,MAAO6B,EAAYC,YAAY,mBAAmB5B,SAAU3B,KAAKyC,sBAC1HrB,EAAAC,EAAAC,cAAA,SAAOI,KAAK,WAAWmB,KAAK,YAAYC,QAAS9C,KAAKmD,MAAMpC,UAAWU,MAAO6B,EAAY3B,SAAU3B,KAAKyC,sBACzGrB,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SAASD,MAAOS,EAAa1B,MAAM,OAAOwB,QAAShC,KAAKiD,kBA5ChFV,EAAA,CAA6BH,aAuDvBkB,EAAa,CACfE,QAAS,EACTlB,OAAQ,SAENJ,EAAc,CAChBuB,WAAY,OACZ3C,MAAO,OACP0C,QAAS,EACTnB,OAAQ,WAWGE,ICxEYH,kBCiBZsB,MAhBf,WACE,OAWEtC,EAAAC,EAAAC,cAAA,cCLgBqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.42780ec3.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class TodoItems extends Component {\r\n\r\n\r\n    render() {\r\n        const todos = this.props.todos;\r\n\r\n        const getStyle = (item) => {\r\n            return {\r\n                color: item.completed ? 'red' : 'green',\r\n                textDecoration: item.completed ? 'line-through' : 'none',\r\n                listStyle: 'none'\r\n            }\r\n\r\n        }\r\n\r\n        const todoItems = todos.map((item) => {\r\n            return <React.Fragment key={item.id}>\r\n                <li style={getStyle(item)}>\r\n                    <span >\r\n                        <input  type=\"checkbox\" onChange ={this.props.changeCheck.bind(this,item.id)} />\r\n                        {item.title}\r\n                        <button style={buttonEditStyle} onClick= {this.props.editItem.bind(this,item.id)} >Edit</button>\r\n                        <button style={buttonStyle} onClick= {this.props.delItem.bind(this,item.id)} >X</button>\r\n                    </span>\r\n                </li>\r\n            </React.Fragment>\r\n\r\n        });\r\n\r\n        return (\r\n            <ul>\r\n                {todoItems}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nconst buttonEditStyle = {\r\n    color : 'blue',\r\n    cursor:'pointer',\r\n    margin: 5\r\n}\r\n\r\nconst buttonStyle = {\r\n    color : 'red',\r\n    cursor:'pointer'\r\n}\r\n\r\n\r\nexport default TodoItems\r\n","import React, { Component } from 'react'\r\n\r\nexport class AddTodo extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.initialState = {\r\n            title: '',\r\n            id: '',\r\n            completed: false\r\n        }\r\n        if (props.itemEdit) {\r\n            this.state = props.itemEdit\r\n        } else {\r\n            this.state = this.initialState;\r\n        }\r\n    }\r\n\r\n    onInputChangeHandle = (e) => {\r\n\r\n        let { name, value } = e.target;\r\n        if (name == 'completed') {\r\n            value = e.target.checked\r\n        }\r\n\r\n\r\n\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    submitForm = () => {\r\n        this.props.saveChangeItem(this.state)\r\n\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n\r\n    render() {\r\n        let form;\r\n\r\n        form = <div>\r\n            <input type=\"text\" name=\"title\" value={this.state.title} style={inputStyle} placeholder=\"Input the title!\" onChange={this.onInputChangeHandle} />\r\n            <input type=\"checkbox\" name=\"completed\" checked={this.state.completed} style={inputStyle} onChange={this.onInputChangeHandle} />\r\n            <input type=\"button\" style={buttonStyle} value='Save' onClick={this.submitForm} />\r\n\r\n        </div>\r\n\r\n        return (\r\n            form\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst inputStyle = {\r\n    padding: 5,\r\n    margin: '5px 0'\r\n}\r\nconst buttonStyle = {\r\n    background: '#0F0',\r\n    color: '#FFF',\r\n    padding: 5,\r\n    cursor: 'pointer'\r\n}\r\n\r\n// const buttonCacelStyle = {\r\n//     background: '#0FF',\r\n//     color: '#FFF',\r\n//     padding: 5,\r\n//     cursor: 'pointer'\r\n// }\r\n\r\n\r\nexport default AddTodo\r\n","import React, { Component } from 'react'\r\nimport TodoItems from './TodoItems'\r\nimport AddTodo from './AddTodo'\r\n\r\nexport class Todos extends Component {\r\n\r\n    state = {\r\n        todos: [\r\n            {\r\n                id: 1,\r\n                title: \"a1\",\r\n                completed: true\r\n            },\r\n            {\r\n                id: 2,\r\n                title: \"a2\",\r\n                completed: true\r\n            }, {\r\n                id: 3,\r\n                title: \"a3\",\r\n                completed: false\r\n            }\r\n        ],\r\n        isEdit: false,\r\n        isCreate: false,\r\n        itemEdit: {}\r\n\r\n\r\n    }\r\n\r\n    changeCheck = (id) => {\r\n        const todoChange = this.state.todos.map((todo) => {\r\n            if (todo.id === id) {\r\n                todo.completed = !todo.completed;\r\n            }\r\n            return todo;\r\n        })\r\n        this.setState({\r\n            todos: todoChange\r\n        })\r\n\r\n    }\r\n\r\n    delItem = (id) => {\r\n        const todoChange = this.state.todos.filter((todo) => {\r\n            return todo.id !== id;\r\n        })\r\n        this.setState({\r\n            todos: todoChange\r\n        })\r\n    }\r\n\r\n    editItem = (id) => {\r\n\r\n        const itemEdit = this.state.todos.find((x => x.id === id));\r\n\r\n        if (itemEdit) {\r\n            this.setState({\r\n                isEdit: true,\r\n                itemEdit: itemEdit\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    saveChangeItem = (item) => {\r\n\r\n     \r\n        if(!item.id){\r\n            const newTodo = {\r\n                id:  this.uuidv4(),\r\n                title: item.title,\r\n                completed: item.completed\r\n            }\r\n            this.setState({\r\n                todos: [...this.state.todos, newTodo],\r\n                isEdit: false,\r\n                isCreate: false,\r\n                itemEdit: {}\r\n            })\r\n        }\r\n        else{\r\n          let newTodos =  this.state.todos.map((todo)=>{\r\n                if(todo.id == item.id ){\r\n                    todo.completed  = item.completed ;\r\n                    todo.title = item.title ;\r\n                }\r\n                return todo;\r\n            })\r\n            this.setState({\r\n                todos: newTodos,\r\n                isEdit: false,\r\n                isCreate: false,\r\n                itemEdit: {}\r\n            }) \r\n\r\n        }\r\n     \r\n    }\r\n\r\n    uuidv4() {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 || 0x8);\r\n            return v.toString(16);\r\n        });\r\n    }\r\n\r\n    addClick = () => {\r\n        this.setState({\r\n            isCreate: true\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        let itemForm;\r\n        if (this.state.isEdit || this.state.isCreate) {\r\n            itemForm = <AddTodo itemEdit={this.state.itemEdit} saveChangeItem={this.saveChangeItem} />\r\n        }\r\n        return (\r\n            <div>\r\n                <button onClick={this.addClick}> Add</button>\r\n                {itemForm}\r\n                <TodoItems todos={this.state.todos} changeCheck={this.changeCheck} delItem={this.delItem} editItem={this.editItem} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Todos\r\n","import React from 'react';\r\nimport Todos from './component/Todos'\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    // <div className=\"App\">\r\n    //   <header className=\"App-header\">\r\n    //     <h1> Welcome to Arena of Valor </h1>\r\n    //     <Todos></Todos>\r\n    //     <footer>\r\n    //       <h2> @Tài nè </h2>\r\n    //     </footer>\r\n    //   </header>\r\n    // </div>\r\n\r\n    <span></span>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}